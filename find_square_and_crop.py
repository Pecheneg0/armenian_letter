import cv2
import numpy as np
from picamera2 import Picamera2
import time

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã
camera = Picamera2()
config = camera.create_preview_configuration(main={"size": (1640, 1232), "format": "RGB888"})
camera.configure(config)
camera.start()

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ç—É—Ä–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
def find_square_contour(image):
    """ –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω—Ç—É—Ä –±–µ–ª–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å —á–µ—Ä–Ω–æ–π –±—É–∫–≤–æ–π –≤–Ω—É—Ç—Ä–∏ """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–æ–µ (—á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ)
    gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –±–µ–ª–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    _, binary = cv2.threshold(gray, 200, 255, cv2.THRESH_BINARY)  # –ü–æ—Ä–æ–≥ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –±–µ–ª–æ–≥–æ
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã –Ω–∞ –±–∏–Ω–∞—Ä–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    for contour in contours:
        peri = cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, 0.02 * peri, True)
        
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç—É—Ä –∏–º–µ–µ—Ç 4 –≤–µ—Ä—à–∏–Ω—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        if len(approx) == 4:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–æ—â–∞–¥—å –∫–æ–Ω—Ç—É—Ä–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∞—è
            area = cv2.contourArea(contour)
            if area > 1000:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –º–µ–ª–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                return approx, binary  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç—É—Ä –∏ –±–∏–Ω–∞—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    return None, binary  # –ï—Å–ª–∏ –∫–æ–Ω—Ç—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∏–Ω–∞—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∏ –æ–±—Ä–µ–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def align_and_crop(image, contour):
    """ –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–µ–∑–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ """
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—à–∏–Ω –∫–æ–Ω—Ç—É—Ä–∞
    points = contour.reshape(4, 2)
    rect = np.zeros((4, 2), dtype="float32")
    
    # –°—É–º–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –±—É–¥–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É –ø—Ä–∞–≤–æ–≥–æ –Ω–∏–∂–Ω–µ–≥–æ
    s = points.sum(axis=1)
    rect[0] = points[np.argmin(s)]  # –õ–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
    rect[2] = points[np.argmax(s)]  # –ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
    
    # –†–∞–∑–Ω–∏—Ü–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –±—É–¥–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É –ø—Ä–∞–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É –ª–µ–≤–æ–≥–æ –Ω–∏–∂–Ω–µ–≥–æ
    diff = np.diff(points, axis=1)
    rect[1] = points[np.argmin(diff)]  # –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
    rect[3] = points[np.argmax(diff)]  # –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
    
    # –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    (tl, tr, br, bl) = rect
    widthA = np.sqrt(((br[0] - bl[0]) ** 2) + ((br[1] - bl[1]) ** 2))
    widthB = np.sqrt(((tr[0] - tl[0]) ** 2) + ((tr[1] - tl[1]) ** 2))
    heightA = np.sqrt(((tr[0] - br[0]) ** 2) + ((tr[1] - br[1]) ** 2))
    heightB = np.sqrt(((tl[0] - bl[0]) ** 2) + ((tl[1] - bl[1]) ** 2))
    
    # –í—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã
    maxWidth = max(int(widthA), int(widthB))
    maxHeight = max(int(heightA), int(heightB))
    
    # –¢–æ—á–∫–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    dst = np.array([
        [0, 0],
        [maxWidth - 1, 0],
        [maxWidth - 1, maxHeight - 1],
        [0, maxHeight - 1]], dtype="float32")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –µ—ë
    M = cv2.getPerspectiveTransform(rect, dst)
    warped = cv2.warpPerspective(image, M, (maxWidth, maxHeight))
    
    return warped

# üîπ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
def scan_and_display():
    """ –°–∫–∞–Ω–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏—Ç –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—É—Ä –Ω–∞ —ç–∫—Ä–∞–Ω """
    while True:
        # –°–Ω–∏–º–∞–µ–º –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã
        frame = camera.capture_array("main")
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏ –±–∏–Ω–∞—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        square_contour, binary_image = find_square_contour(frame)
        
        if square_contour is not None:
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –æ–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            aligned_image = align_and_crop(binary_image, square_contour)
            
            # –í—ã–≤–æ–¥–∏–º –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω
            cv2.imshow("Aligned and Cropped Contour", aligned_image)
        
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        else:
            print("‚ö†Ô∏è –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π –∫–æ–Ω—Ç—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏ (3-4 –∫–∞–¥—Ä–∞ –≤ 10 —Å–µ–∫—É–Ω–¥)
        time.sleep(2.5)  # 10 —Å–µ–∫—É–Ω–¥ / 4 –∫–∞–¥—Ä–∞ = 2.5 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∫–∞–¥—Ä

    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    cv2.destroyAllWindows()
    camera.stop()

# üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
scan_and_display()